# KRW Momentum Radar - Cursor Rules

## 프로젝트 개요
KRW Momentum Radar는 다국가 주식 시장의 모멘텀을 실시간으로 분석하고 시각화하는 Streamlit 웹 애플리케이션입니다. 진정한 의미의 전체 시장 탐색 엔진으로 진화했습니다.

## 기술 스택
- **Frontend**: Streamlit
- **Data**: yfinance (Yahoo Finance API), finvizfinance (Finviz 스크리닝)
- **Visualization**: Plotly
- **Data Processing**: Pandas, NumPy
- **Timezone**: pytz (KST 기준)

## 코딩 스타일
- **Python**: PEP 8 준수
- **함수/변수명**: snake_case
- **클래스명**: PascalCase
- **상수**: UPPER_CASE
- **문서화**: 모든 함수와 클래스에 docstring 추가

## 주요 기능
1. **FMS (Fast Momentum Score)**: 다차원 모멘텀 지표 종합 점수 (관심종목 기준 Z-score 정규화)
2. **거래 적합성 필터**: True Range 기반 치명적 변동성 및 반복적 하방리스크 감지로 부적합 종목 자동 실격
3. **동적 컬럼 재정렬**: FMS 전략에 맞춰 결과 테이블 컬럼 순서 자동 조정
4. **가속 보드**: FMS 기반 실시간 모멘텀 랭킹
5. **비교 차트**: 다국가 종목들의 KRW 환산 가격 비교
6. **수익률-변동성 이동맵**: 정적/애니메이션 모드 지원
7. **상세 분석**: 개별 종목의 EMA 분석 및 Drawdown 추적
8. **동적 관심종목 관리**: 영구 저장 및 실시간 추가/삭제
9. **진정한 전체 시장 탐색 엔진**: Finviz.com 기반 실시간 유니버스 스크리닝 (8,000+ 종목)
10. **진부한 종목 자동 편출**: FMS 기반 저성과 종목 제거 제안
11. **배치 스캔 시스템**: CLI 기반 오프라인 배치 스캔으로 정확도 향상 및 중앙화된 FMS 로직
12. **다국가 통합 스캔**: 미국(Finviz) + 한국(KOSPI200/KOSDAQ150) 유니버스 병합 스캔

## 파일 구조
```
Momentum/
├── app.py                    # 메인 Streamlit 애플리케이션 (v3.2.0)
├── run_scan_batch.py         # 배치 스캔 CLI 실행기
├── run_batch_manual.bat      # Windows 배치 스캔 수동 실행 배치 파일
├── universe_utils.py         # 유니버스 관리 유틸리티 (NEW!)
├── watchlist_utils.py        # 관심종목 관리 유틸리티
├── analysis_utils.py         # 공통 분석 유틸(가격/FX/지표/FMS/필터)
├── watchlist.csv            # 사용자 관심종목 저장 파일 (버전 관리 포함)
├── screened_universe.csv     # 사전 필터링된 미국 유니버스 (Finviz)
├── korean_universe.csv       # 한국 유니버스 (KOSPI 200 + KOSDAQ 150)
├── requirements.txt          # Python 의존성
├── README.md                # 프로젝트 설명
├── LICENSE                  # MIT 라이선스
├── .gitignore              # Git 무시 파일
├── CHANGELOG.md            # 버전 변경 이력
├── CONTRIBUTING.md         # 기여 가이드
├── DEPLOYMENT.md           # 배포 가이드
└── .cursorrules            # Cursor AI 규칙
```

## 중요 파일 관리 규칙

### 중요 파일 관리
- **watchlist.csv**: 사용자 관심종목 저장 파일 (버전 관리 포함, 삭제 금지)
- **screened_universe.csv**: 사전 필터링된 미국 유니버스 목록 (매일 업데이트 권장)
- **korean_universe.csv**: 한국 유니버스 목록 (KOSPI 200 + KOSDAQ 150, 수동 관리)
- **universe_utils.py**: 유니버스 관리 유틸리티 (모듈화됨)

## FMS 계산 로직 (중요!)
- **Z-score 정규화 기준**: 관심종목 집합을 기준으로 통일
- **참조 데이터 시스템**: `reference_prices_krw` 매개변수로 Z-score 계산 기준 지정
- **일관성 보장**: 유니버스 스캔과 관심종목에서 동일한 FMS 값 계산
- **하위 호환성**: `reference_prices_krw=None`일 때 기존 방식으로 동작
- **거래 적합성 필터**: True Range 기반 OHLC 데이터로 부적합 종목 자동 실격 (FMS = -999)
  - 치명적 변동성: 63거래일 내 True Range 기반 일일 변동폭 30% 초과 시 실격 (가격 갭 포함)
  - 반복적 하방리스크: 20거래일 내 하방리스크 -7% 미만 4일 이상 시 실격
- **Z-score 계산 최적화**: -999 패널티 종목을 Z-score 평균/표준편차 계산에서 제외하여 왜곡 방지
- **API 제한 대응**: 배치 간 0.1초 대기 및 지수 백오프 재시도 (최대 10회)

## 개발 가이드라인
- **캐싱**: `@st.cache_data` 적절히 사용하여 성능 최적화
- **에러 처리**: 사용자 친화적인 에러 메시지 제공
- **UI/UX**: 일관된 레이아웃과 스타일 유지
- **데이터 처리**: 효율적인 데이터 다운로드 및 전처리

## 함수 정의 순서 규칙 (중요!)
- **의존성 순서**: 함수가 다른 함수를 호출하는 경우, 호출되는 함수가 먼저 정의되어야 함
- **정의 순서**: 
  1. 기본 유틸리티 함수 (classify, log 등)
  2. 데이터 다운로드 함수 (download_prices, download_fx 등)
  3. 데이터 처리 함수 (harmonize_calendar, align_bday_ffill 등)
  4. 지표 계산 함수 (ema, returns_pct, momentum_now_and_delta 등)
  5. 고급 기능 함수 (calculate_fms_for_batch, scan_market_for_new_opportunities 등)
  6. UI 관련 함수 (display_name, only_name 등)
- **중복 제거**: 같은 함수가 여러 번 정의되지 않도록 주의
- **테스트**: 함수 정의 순서 변경 후 반드시 애플리케이션 실행 테스트

## 배포
- **Streamlit Cloud**: 주요 배포 플랫폼
- **Docker**: 컨테이너화 지원
- **클라우드**: AWS, GCP, Azure 지원

## 주의사항
- Yahoo Finance API 제한 고려
- Finviz 스크리닝 API 제한 고려
- 메모리 사용량 최적화
- 실시간 데이터 업데이트 처리
- 다국가 시장의 시간대 차이 고려
- **중요 파일 보존**: watchlist.csv, screened_universe.csv 파일 항상 보존

## Streamlit 실행 규칙
- **기존 프로세스 중지**: Streamlit 실행 전에 기존 Python 프로세스를 중지
- **포트 충돌 방지**: 새로운 포트를 계속 열지 말고 기존 포트(8501) 사용
- **실행 순서**: 
  1. `taskkill /f /im python.exe` (기존 프로세스 중지)
  2. `streamlit run app.py --server.port 8501` (애플리케이션 실행)
- **의존성 확인**: 실행 전 필수 패키지 설치 상태 확인

## 버전 관리
- **Semantic Versioning** 준수
- **Keep a Changelog** 형식 사용
- 주요 변경사항은 CHANGELOG.md에 기록
